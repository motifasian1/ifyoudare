import edu.duke.*;
import java.io.File;

public class PerimeterAssignmentRunner {
    public double getPerimeter (Shape s) {
        // Start with totalPerim = 0
        double totalPerim = 0.0;
        // Start wth prevPt = the last point 
        Point prevPt = s.getLastPoint();
        // For each point currPt in the shape,
        for (Point currPt : s.getPoints()) {
            // Find distance from prevPt point to currPt 
            double currDist = prevPt.distance(currPt);
            // Update totalPerim by currDist
            totalPerim = totalPerim + currDist;
            // Update prevPt to be currPt
            prevPt = currPt;
        }
        // totalPerim is the answer
        return totalPerim;
    }

    public int getNumPoints (Shape s) {
        // Put code here
        int numPoints = 0;
        for (Point p: s.getPoints()) {
            numPoints++; //if there is a point, add 1 to newNumPoints counter
        }
        return numPoints;
    }

    public double getAverageLength(Shape s) {
        // Put code here
        int averageDistance = 0;
        int totalDistance = 0;
        Point oldPoint;
        Point initialPoint = Point(0,0);
        double newDist;
        for (Point p: s.getPoints()) {
            //for each point in Shape s, get the distance b/w them 
            Point newPoint = p;
            if (oldPoint != newPoint && oldPoint != initialPoint) {
                newDist = oldPoint.distance(newPoint);
                oldPoint = newPoint;
                totalDistance = newDist + totalDistance; //add the new distance b/w 2 new points to old total
            }
        }
        average = totalDistance / getNumPoints(s);
        return average;
    }

    public double getLargestSide(Shape s) {
        // Put code here
        double largestSide = 0.0;
        Point oldPoint; 
        Point initialPoint = Point(0,0);
        double newSide;
        for (Point p: s.getPoints()) {
            if(oldPoint != p && oldPoint != initialPoint) {
                newSide = oldPoint.distance(newPoint);
                if (newSide >= largestSide) {
                    largestSide = newSide;
                }
            }
        }
        return largestSide;
    }

    public double getLargestX(Shape s) {
        // Put code here
        double largestX = 0;
        for (Point p: s.getPoints()) {
            double newX = p.getX();
            if (largestX <= newX) {
                largestX = newX;
            }
        }
        return largestX;
    }

    public double getLargestPerimeterMultipleFiles() {
        // Put code here
        return 0.0;
    }

    public String getFileWithLargestPerimeter() {
        // Put code here
        File temp = null;    // replace this code
        return temp.getName();
    }

    public void testPerimeter () {
        FileResource fr = new FileResource();
        Shape s = new Shape(fr);
        double length = getPerimeter(s);
        System.out.println("perimeter = " + length);
        int numberOfPoints = getNumPoints(s);
        System.out.println("number of points = " + numberOfPoints);
        double avgLength = getAverageLength(s);
        System.out.println("Average length = " + avgLength);
        double largestSide = getLargestSide(s);
        System.out.println("Largest side = " + largestSide);
        double largestX = getLargestX(s);
        System.out.println("Largest x = " + largestX);
    }
    
    public void testPerimeterMultipleFiles() {
        // Put code here
    }

    public void testFileWithLargestPerimeter() {
        // Put code here
    }

    // This method creates a triangle that you can use to test your other methods
    public void triangle(){
        Shape triangle = new Shape();
        triangle.addPoint(new Point(0,0));
        triangle.addPoint(new Point(6,0));
        triangle.addPoint(new Point(3,6));
        for (Point p : triangle.getPoints()){
            System.out.println(p);
        }
        double peri = getPerimeter(triangle);
        System.out.println("perimeter = "+peri);
    }

    // This method prints names of all files in a chosen folder that you can use to test your other methods
    public void printFileNames() {
        DirectoryResource dr = new DirectoryResource();
        for (File f : dr.selectedFiles()) {
            System.out.println(f);
        }
    }

    public static void main (String[] args) {
        PerimeterAssignmentRunner pr = new PerimeterAssignmentRunner();
        pr.testPerimeter();
    }
}
