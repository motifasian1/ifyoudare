
/**
 * Write a description of Part1 here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class Part1 {
    public String findSimpleGene(String dna, int where) {
        //Convert dna into all uppercase letters
        String newDNA = dna.toUpperCase();
        //Find index of start codon, store indexOfStart
        int indexOfStart = findStartCodon(newDNA, where); 
        //If no start codon "ATG" or stop codon, return empty string
        if (indexOfStart == -1) {
            return "";
        } 
        //Find index of stop codon, store indexOfStop
        int indexTAA = findStopCodon(newDNA, indexOfStart, "TAA");
        int indexTGA = findStopCodon(newDNA, indexOfStart, "TGA");
        int indexTAG = findStopCodon(newDNA, indexOfStart, "TAG");
        int minIndex = Math.min(indexTAA, Math.min(indexTGA, indexTAG));
        if (minIndex == dna.length()) {
            return "";
        }
        return newDNA.substring(indexOfStart, minIndex + 3);
    }
    
    public int findStartCodon (String dna, int where) {
        int indexOfStart = dna.indexOf("ATG", where);
        if (indexOfStart == -1) {
            return -1;
        }
        return indexOfStart;
    }
    
    public int findStopCodon (String dna, int startIndex, String stopCodon) {
        //Search dna, if "TAA" "TGA" or "TAG" are found, compare the index of each and return the smallest index
        int currIndex = dna.indexOf(stopCodon, startIndex + 3);
        //If no stop codon, return out of bounds
        if (currIndex != -1) {
            if ((currIndex - startIndex) % 3 == 0) {
                return currIndex;
            }
            //update currIndex to find next occurrence of the stop codon
            currIndex = dna.indexOf(stopCodon, currIndex+3);
        }
        return dna.length();
    }
    
    public void testFindStopCodon() {
        //Return index 9 for TAA stop 
        String dna = "ATGAAATTTTAA";
        String stop = "TAA";
        System.out.println(findStopCodon(dna, findStartCodon(dna, 0), stop));
        //Return 18 for index TAG
        dna = "ATGAAATTTCCCGGGAAATAGTAA";
        stop = "TAG";
        System.out.println(findStopCodon(dna, findStartCodon(dna, 0), stop));
        //Return index 15 for TGA
        dna = "ATGAAATTTCCCGGGTGAAAATAGTAA";
        stop = "TAG";
        System.out.println(findStopCodon(dna, findStartCodon(dna, 0), stop));
        //Return empty b/c no TAG found
        dna = "ATGAAATTTCCCGGGTATTAT";
        stop = "TAG";
        System.out.println(findStopCodon(dna, findStartCodon(dna, 0), stop));
    }
    
    public void testFindGene() {
        System.out.println("New test");
        //DNA no ATG
        String dna = "AAATTTTAA";
        System.out.println(dna);
        System.out.println(findSimpleGene(dna, 0));
        //DNA w/ATG and 1 stop codon TAG
        dna = "ATGAAATTTCCCGGGAAATAG";
        System.out.println(dna);
        System.out.println(findSimpleGene(dna, 0));
        //DNA w/ATG and 2 stop codons TAG and TAA, ends in TAG
        dna = "ATGAAATTTCCCGGGAAACCCTCCCCTTAGAACCACTAA";
        System.out.println(dna);
        System.out.println(findSimpleGene(dna, 0));
        //DNA w/ATG and 2 stop codons TGA and TAA, prints TAG
        dna = "ATGAAATTTCCCGGGAAATAGTAA";
        System.out.println(dna);
        System.out.println(findSimpleGene(dna, 0));
        //DNA w/ATG and 3 stop codons, ends in TAA
        dna = "ATGAAATTTCCCGGGAAACTGGTCCGCGCGTAAATTACCCCATAGCCCAAATTTTGA";
        System.out.println(dna);
        System.out.println(findSimpleGene(dna, 0));
        //DNA w/ATG and no stop codons
        dna = "ATGAAATTTCCCGGGAAA";
        System.out.println(dna);
        System.out.println(findSimpleGene(dna, 0));
    }
    
    public void printAllGenes(String dna) {
        //Set startIndex to 0
        int startIndex = 0;
        //Repeat the following steps
        while(true){
            //Find the next gene after startIndex
            String currGene = findSimpleGene(dna, startIndex);
            //If no gene found, leave this loop
            if(currGene.isEmpty()) {
                break;
            }
            //Print that gene out
            System.out.println("Current gene is: " + currGene);
            //Set startIndex to new index of end of last gene
            startIndex = dna.indexOf(currGene, startIndex) + currGene.length();
        }
    }
    
    public void testPrintAllGenes() {
        //            ATGv  TAAv  ATG   v  v  TGA
        String dna =("ATGATCTAATTTATGCTGCAACGGTGAAGA");
        System.out.println("Testing printAllGenes on :" + dna);
        printAllGenes(dna);
        // test on empty string
        dna =("");
        System.out.println("Testing printAllGenes on :" + dna);
        printAllGenes(dna);
    }
}
    


